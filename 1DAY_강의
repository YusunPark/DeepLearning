{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1DAY_강의","provenance":[],"mount_file_id":"1jylMVMamtxouL6MhiO_EkCNJA_ughgO2","authorship_tag":"ABX9TyP7AtZ1BbyVSi2rdxS6xmbl"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"FMFfwokt7sus"},"source":["## 실습자료 git clone 작업\r\n","\r\n","! git clone https://github.com/Steven-A3/DeepLearningZeroToAllTF2Colab.git"]},{"cell_type":"markdown","metadata":{"id":"7p3dyc3xleFn"},"source":["# 1DAY 시작\r\n"]},{"cell_type":"markdown","metadata":{"id":"vzRHa_Avs_OU"},"source":["\r\n","## Keras 창시자로 ~"]},{"cell_type":"code","metadata":{"id":"AfRgsjOXkAOj"},"source":["# 텐서플로우 import 작업\r\n","import tensorflow as tf"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HVMvJ0l6mepg"},"source":["# 텐서플로우 버전확인\r\n","print(tf.__version__)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YZiTvE8VnaGY"},"source":["### Tensors (텐서)\r\n","\r\n","상수형 텐서\r\n","\r\n","- 덴서플로우에서는 데이터들을 전부 텐서라고 부른다"]},{"cell_type":"code","metadata":{"id":"XmuWUashnAYR"},"source":["x = tf.constant([[10,4], [2, 5]])\r\n","print(x)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xyN_qU9sn8Qy"},"source":["해당 텐서의 값을 Numpy 배열형태로 가져오고 싶다면 .numpy()를 호출하면 됩니다:\r\n"]},{"cell_type":"code","metadata":{"id":"N_ja-9bNnJeS"},"source":["x.numpy()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k_28RBJ2ISG2"},"source":["# Lab 02. Simple Linear Regression"]},{"cell_type":"code","metadata":{"id":"hVdz3XnWICtZ","colab":{"base_uri":"https://localhost:8080/"},"cellView":"both","executionInfo":{"status":"ok","timestamp":1613916684440,"user_tz":-540,"elapsed":2430,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"21a930d5-4bb5-42ec-fadd-a6184101b885"},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","print(tf.__version__)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["2.4.1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"t1-vY8svJ8kf"},"source":["## 가설과 비용\n","\n","$$ H(x) = Wx + b $$\n","\n","### 비용\n","\n","$$ cost(W)=\\frac {1}{m}\\sum _{i=1}^{m}({H(x)^{(i)}-y^{(i)})^2} $$"]},{"cell_type":"code","metadata":{"id":"yGXP6MBJJak4","executionInfo":{"status":"ok","timestamp":1613916684440,"user_tz":-540,"elapsed":1266,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}}},"source":["# x 데이터를 설정을 한 후에\n","\n","x_data = [1, 2, 3, 4, 5]\n","y_data = [3, 5, 7, 9, 11]"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZDUteXgfJ0np","colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"status":"ok","timestamp":1613916684915,"user_tz":-540,"elapsed":1289,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"c6ed186c-f8e9-46f7-c8b8-19d7e1676c29"},"source":["# plot으로 그림을 그림\n","\n","plt.plot(x_data, y_data, 'o')\n","\n","# lim으로 범위를 지정해준다.\n","plt.xlim(0, 5.3)\n","plt.ylim(0, 12)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.0, 12.0)"]},"metadata":{"tags":[]},"execution_count":7},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ryEeIfAjQ7EA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613308948984,"user_tz":-540,"elapsed":676,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"77b4fe6c-6705-423a-e46e-0f9495b8f84a"},"source":["# 평균값\n","v = [1., 2., 3., 4.]\n","tf.reduce_mean(v)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=2.5>"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"FCwBqIqORi1I","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613308955959,"user_tz":-540,"elapsed":609,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"67c37fb2-a276-4b38-a989-b9b8cce4e39b"},"source":["tf.square(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int32, numpy=9>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"Z4_xkE-DRppE"},"source":["x_data = [1, 2, 3, 4, 5]\n","y_data = [3, 5, 7, 9, 11]\n","\n","W = tf.Variable(2.0)\n","b = tf.Variable(0.5)\n","\n","hypothesis = W * x_data + b"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tSuMb37MR5-a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613309000343,"user_tz":-540,"elapsed":575,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"d58a498e-844e-4d3b-f3e4-7f985201106a"},"source":["W.numpy(), b.numpy()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2.0, 0.5)"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"XIlIXlArR8GC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613309006866,"user_tz":-540,"elapsed":654,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"c4f557fc-a4f5-43cf-9a58-1e37a60490a3"},"source":["# 가설을 출력\r\n","# input 이 5개였기 떄문에 5개의output이 나온다\r\n","hypothesis.numpy()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 2.5,  4.5,  6.5,  8.5, 10.5], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"7wqEHgv0SAA1","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1613309009687,"user_tz":-540,"elapsed":554,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"817701be-d742-4c30-c3f4-a1240901d9e5"},"source":["# 가설의 그래프\n","# 빨간색 = 가설, 파란색 = y  -> 점점 멀어지는 차이가 있다.\n","\n","plt.plot(x_data, hypothesis.numpy(), \"r-\")\n","plt.plot(x_data, y_data, 'o')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7be9708470>]"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"cnChulnyTJRm"},"source":["## 비용\n","\n","$$ cost(W)=\\frac {1}{m}\\sum _{i=1}^{m}({H(x)^{(i)}-y^{(i)})^2} $$\n"]},{"cell_type":"code","metadata":{"id":"Os0SsjNNtk_w"},"source":["cost = tf.reduce_mean(tf.square(hypothesis - y_data))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cw9ix6sfTk9n"},"source":["with tf.GradientTape() as tape:\n","  hypothesis = W * x_data + b\n","  cost = tf.reduce_mean(tf.square(hypothesis - y_data))\n","\n","W_grad, b_grad = tape.gradient(cost, [W, b])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xx7nRSLhVFC_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613309214187,"user_tz":-540,"elapsed":536,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"daef03ce-8ad2-4704-b2cf-e4094c60e165"},"source":["W_grad.numpy(), b_grad.numpy()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-3.0, -1.0)"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"ZEkRCOXZaVmL"},"source":["### Gradient\n","\n","$$ \\frac{dx}{dy} $$\n","\n","$$ \\frac{dcost}{dW} $$\n","\n","$$ \\frac{dcost}{db} $$\n"]},{"cell_type":"code","metadata":{"id":"oz5J9zKGVMX0"},"source":["# 변수 업데이트"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-a20mPDRaiOe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613309310152,"user_tz":-540,"elapsed":737,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"84f30884-a751-4751-8073-9a374dfb66fb"},"source":["learning_rate = 0.03\n","\n","W.assign_sub(learning_rate * W_grad)\n","b.assign_sub(learning_rate * b_grad)\n","\n","W.numpy(), b.numpy()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2.0092678, 0.966541)"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"WcAh8UpBatYQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613309313267,"user_tz":-540,"elapsed":3512,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"6a50a2a2-6ecd-4018-cb4f-091d8233ccf2"},"source":["learning_rate = 0.03\n","\n","\n","W = tf.Variable(3.0)\n","b = tf.Variable(1.0)\n","\n","for i in range(2000):\n","  with tf.GradientTape() as tape:\n","    hypothesis = W * x_data + b\n","    cost = tf.reduce_mean(tf.square(hypothesis - y_data))\n","\n","  W_grad, b_grad = tape.gradient(cost, [W, b])\n","  W.assign_sub(learning_rate * W_grad)\n","  b.assign_sub(learning_rate * b_grad)\n","  if i % 100 == 0:\n","    print(\"{:5}|{:10.4f}|W {:10.4f}|b {:10.6f}|cost\".format(i, W.numpy(), b.numpy(), cost))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    0|    2.3400|W     0.8200|b  11.000000|cost\n","  100|    2.0254|W     0.9081|b   0.001568|cost\n","  200|    2.0092|W     0.9669|b   0.000204|cost\n","  300|    2.0033|W     0.9880|b   0.000027|cost\n","  400|    2.0012|W     0.9957|b   0.000003|cost\n","  500|    2.0004|W     0.9984|b   0.000000|cost\n","  600|    2.0002|W     0.9994|b   0.000000|cost\n","  700|    2.0001|W     0.9998|b   0.000000|cost\n","  800|    2.0000|W     0.9999|b   0.000000|cost\n","  900|    2.0000|W     1.0000|b   0.000000|cost\n"," 1000|    2.0000|W     1.0000|b   0.000000|cost\n"," 1100|    2.0000|W     1.0000|b   0.000000|cost\n"," 1200|    2.0000|W     1.0000|b   0.000000|cost\n"," 1300|    2.0000|W     1.0000|b   0.000000|cost\n"," 1400|    2.0000|W     1.0000|b   0.000000|cost\n"," 1500|    2.0000|W     1.0000|b   0.000000|cost\n"," 1600|    2.0000|W     1.0000|b   0.000000|cost\n"," 1700|    2.0000|W     1.0000|b   0.000000|cost\n"," 1800|    2.0000|W     1.0000|b   0.000000|cost\n"," 1900|    2.0000|W     1.0000|b   0.000000|cost\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zsq5ffMPvuBY"},"source":["W, b 값들이 우리가 찾고자한 값으로 변화한 것을 볼 수 있게 되었다."]},{"cell_type":"code","metadata":{"id":"5IHJO9DzwT9-"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rTtaRWGfhXiL"},"source":["# Lab 03. Linear Regression Minimizing Cost\n","\n","<img width=\"200\" src=\"https://i.imgur.com/hbPVe1T.png\">"]},{"cell_type":"code","metadata":{"id":"re7EiyDqhWMM"},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GEbxvZeuhq2P","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1597384357772,"user_tz":-540,"elapsed":1008,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"5407067a-9be7-4d9c-c0a8-3e691dfdfb2b"},"source":["print(tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.3.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RbpmBp9qh7OK"},"source":["## Hypothesis and Cost\n","\n","$$ H(x) = Wx + b $$ \n","\n","$$ cost(W, b)=\\frac { 1 }{ m } \\sum _{i=1}^{m}{ { (H{ x }^{ i }-y^{ i } })^{ 2 } }  $$\n","\n","## Simplifed hypothesis\n","\n","$$ H(x) = Wx $$ \n","\n","$$ cost(W)=\\frac { 1 }{ m } \\sum _{i=1}^{m}{ { (W{ x }^{ i }-y^{ i } })^{ 2 } }  $$\n"]},{"cell_type":"markdown","metadata":{"id":"aLIds7MeiCaa"},"source":["## Cost function\n","$$ cost(W)=\\frac { 1 }{ m } \\sum _{i=1}^{m}{ { (W{ x }^{ i }-y^{ i } })^{ 2 } }  $$\n","\n","W = -1, cost(W) = 18.67\n","$$ cost(W)=\\frac { 1 }{ 3 } ( (-1 * 1 - 1)^2 + (-1 * 2 - 2)^2 + (-1 * 3 - 3)^2) $$\n","\n","W = 0, cost(W) = 4.67\n","$$ cost(W)=\\frac { 1 }{ 3 } ( (0 * 1 - 1)^2 + (0 * 2 - 2)^2 + (0 * 3 - 3)^2) $$\n","\n","W = 1, cost(W) = 0\n","$$ cost(W)=\\frac { 1 }{ 3 } ( (1 * 1 - 1)^2 + (1 * 2 - 2)^2 + (1 * 3 - 3)^2) $$\n","\n","W = 2, cost(W) = 4.67\n","$$ cost(W)=\\frac { 1 }{ 3 } ( (2 * 1 - 1)^2 + (2 * 2 - 2)^2 + (2 * 3 - 3)^2) $$\n"]},{"cell_type":"markdown","metadata":{"id":"Oet9OKzmi43W"},"source":["## 순수 파이썬으로 비용 계산하기"]},{"cell_type":"code","metadata":{"id":"xxbyaP3IhvNf","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1597384641204,"user_tz":-540,"elapsed":1026,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"76efb146-df40-425c-f222-fd4e82b9dca0"},"source":["X = np.array([1, 2, 3])\n","Y = np.array([1, 2, 3])\n","\n","def cost_func(W, X, Y):\n","  c = 0\n","  for i in range(len(X)):\n","    c += (W * X[i] - Y[i]) ** 2\n","    return c / len(X)\n","\n","for feed_W in np.linspace(-3, 5, num=15):\n","  curr_cost = cost_func(feed_W, X, Y)\n","  print(\"{:6.3f}|{:10.5f}\".format(feed_W, curr_cost))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["-3.000|   5.33333\n","-2.429|   3.91837\n","-1.857|   2.72109\n","-1.286|   1.74150\n","-0.714|   0.97959\n","-0.143|   0.43537\n"," 0.429|   0.10884\n"," 1.000|   0.00000\n"," 1.571|   0.10884\n"," 2.143|   0.43537\n"," 2.714|   0.97959\n"," 3.286|   1.74150\n"," 3.857|   2.72109\n"," 4.429|   3.91837\n"," 5.000|   5.33333\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mPhAW72NjZ0t"},"source":["## 텐서플로우로 비용 계산하기"]},{"cell_type":"code","metadata":{"id":"m4jxPGEzh4qU","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1597385455410,"user_tz":-540,"elapsed":914,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"ee8de7aa-71de-49e1-c1c0-44a33a06af0e"},"source":["X = np.array([1, 2, 3])\n","Y = np.array([1, 2, 3])\n","\n","def cost_func(W, X, Y):\n","  hypothesis = X * W\n","  return tf.reduce_mean(tf.square(hypothesis - Y))\n","\n","W_values = np.linspace(-3, 5, num=15)\n","cost_values = []\n","\n","for feed_W in W_values:\n","  curr_cost = cost_func(feed_W, X, Y)\n","  cost_values.append(curr_cost)\n","  print(\"{:6.3f} | {:10.5f}\".format(feed_W, curr_cost))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["-3.000 |   74.66667\n","-2.429 |   54.85714\n","-1.857 |   38.09524\n","-1.286 |   24.38095\n","-0.714 |   13.71429\n","-0.143 |    6.09524\n"," 0.429 |    1.52381\n"," 1.000 |    0.00000\n"," 1.571 |    1.52381\n"," 2.143 |    6.09524\n"," 2.714 |   13.71429\n"," 3.286 |   24.38095\n"," 3.857 |   38.09524\n"," 4.429 |   54.85714\n"," 5.000 |   74.66667\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QPImpAMwlhzp"},"source":["plt.rcParams[\"figure.figsize\"] = (8,6)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ktZ2x6pFmJrY","colab":{"base_uri":"https://localhost:8080/","height":405},"executionInfo":{"status":"ok","timestamp":1597385583280,"user_tz":-540,"elapsed":1045,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"c131e613-ff36-4db7-8aff-8897957f0f3d"},"source":["plt.plot(W_values, cost_values, \"b\")\n","plt.ylabel('Cost(W)')\n","plt.xlabel('W')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'W')"]},"metadata":{"tags":[]},"execution_count":11},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ATYzzpSNmaZg"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fQ2MgwYgbFN3"},"source":["# Lab04 - Multi-variable Linear Regression\n","\n","<img width=\"200\" src=\"https://i.imgur.com/hbPVe1T.png\">"]},{"cell_type":"markdown","metadata":{"id":"XlXXB_9ibQuT"},"source":["## Multi-variable linear regression"]},{"cell_type":"markdown","metadata":{"id":"RWEDj8MQbU3e"},"source":["Predicting exam score - regression using three inputs (x1, x2, x3)\n","\n","x1 (quiz 1) | x2 (quiz 2) | x3 (mid 1) | Y (final)\n","---- | ---- | ----| ----\n","73 | 80 | 75 | 152\n","93 | 88 | 93 | 185\n","89 | 91 | 90 | 180\n","96 | 98 | 100 | 196\n","73 | 66 | 70 | 142\n","\n","Test Scores for General Psychology (https://goo.gl/g2T8Kp )\n"]},{"cell_type":"markdown","metadata":{"id":"F18z4mJxcHv7"},"source":["## Matrix multiplication\n","\n","### dot product(=scalar product, 내적)\n","<img src=\"https://www.mathsisfun.com/algebra/images/matrix-multiply-a.svg\" >\n","\n","\n","https://www.mathsisfun.com/algebra/matrix-multiplying.html"]},{"cell_type":"markdown","metadata":{"id":"sroFsRv-cOl8"},"source":["## Multi-feature regression\n","\n","#### Hypothesis\n","\n","$$ H(x) = w x + b $$\n","\n","$$ H(x_1, x_2, x_3) = w_1 x_1 + w_2 x_2 + w_3 x_3 + b $$"]},{"cell_type":"markdown","metadata":{"id":"VXtK2-flcT9y"},"source":["## Hypothesis using matrix\n","\n","$$ H(x_1, x_2, x_3) = \\underline{w_1 x_1 + w_2 x_2 + w_3 x_3} + b $$\n","\n","$$ w_1 x_1 + w_2 x_2 + w_3 x_3 $$ \n","\n","$$ \\begin{pmatrix} w_{ 1 } & w_{ 2 } & w_{ 3 } \\end{pmatrix}\\cdot \\begin{pmatrix} x_{ 1 } \\\\ x_{ 2 } \\\\ x_{ 3 } \\end{pmatrix} $$\n","\n","$$ WX $$ (W, X 는 matrix)"]},{"cell_type":"markdown","metadata":{"id":"MN9BHHk9cVBE"},"source":["## Hypothesis without b\n","\n","$$ H(x_1, x_2, x_3) = w_1 x_1 + w_2 x_2 + w_3 x_3 + b$$\n","\n","$$ = b + w_1 x_1 + w_2 x_2 + w_3 x_3 $$\n","\n","$$ = \\begin{pmatrix} b & x_{ 1 } & x_{ 2 } & x_{ 3 } \\end{pmatrix}\\cdot \\begin{pmatrix} 1 \\\\ w_{ 1 } \\\\ w_{ 2 } \\\\ w_{ 3 } \\end{pmatrix} $$\n","\n","$$ = XW $$\n","\n"]},{"cell_type":"markdown","metadata":{"id":"9U4gdmQ1cbNJ"},"source":["## Hypothesis using matrix \n","\n","#### Many x instances\n","\n","$$ \\begin{pmatrix} x_{ 11 } & x_{ 12 } & x_{ 13 } \\\\ x_{ 21 } & x_{ 22 } & x_{ 23 } \\\\ x_{ 31 } & x_{ 32 } & x_{ 33 }\\\\ x_{ 41 } & x_{ 42 } & x_{ 43 }\\\\ x_{ 51 } & x_{ 52 } & x_{ 53 }\\end{pmatrix} \\cdot \\begin{pmatrix} w_{ 1 } \\\\ w_{ 2 } \\\\ w_{ 3 } \\end{pmatrix}=\\begin{pmatrix} x_{ 11 }w_{ 1 }+x_{ 12 }w_{ 2 }+x_{ 13 }w_{ 3 } \\\\ x_{ 21 }w_{ 1 }+x_{ 22 }w_{ 2 }+x_{ 23 }w_{ 3 }\\\\ x_{ 31 }w_{ 1 }+x_{ 32 }w_{ 2 }+x_{ 33 }w_{ 3 } \\\\ x_{ 41 }w_{ 1 }+x_{ 42 }w_{ 2 }+x_{ 43 }w_{ 3 } \\\\ x_{ 51 }w_{ 1 }+x_{ 52 }w_{ 2 }+x_{ 53 }w_{ 3 } \\end{pmatrix} $$\n","\n","$$ [5, 3] \\cdot [3, 1] = [5, 1] $$\n","\n","$$ H(X) = XW $$\n","\n","5는 데이터(instance)의 수, 3은 변수(feature)의 수, 1은 결과"]},{"cell_type":"markdown","metadata":{"id":"EvDmFk7ychh6"},"source":["## Hypothesis using matrix (n output)\n","\n","$$ [n, 3] \\cdot [?, ?] = [n, 2] $$\n","\n","$$ H(X) = XW $$\n","\n","* n은 데이터(instance)의 개수, 2는 결과 값의 개수로 주어진다.\n","* 이때, W [?, ?] ⇒ [3, 2]"]},{"cell_type":"markdown","metadata":{"id":"wdTmTvkNcqBF"},"source":["## WX vs XW\n","\n","#### Theory (Lecture) :\n"," $$ H(x) = Wx + b  $$\n","\n","#### TensorFlow (Implementation) :\n","\n","$$ H(X) = XW $$"]},{"cell_type":"markdown","metadata":{"id":"Q1OYePNncsKV"},"source":["## Simple Example (2 variables)\n","\n","x1 | x2 | y\n","---- | ---- | ----\n","1  |  0  |  1\n","0  |  2  |  2\n","3  |  0  |  3\n","0  |  4  |  4\n","5  |  0  |  5"]},{"cell_type":"code","metadata":{"id":"yD4Mgyo9tnVg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613563813174,"user_tz":-540,"elapsed":3009,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"8258af96-4fa9-47db-9c23-103fb5e22381"},"source":["import tensorflow as tf\n","import numpy as np\n","\n","print(tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.4.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NB_K65t6atxA"},"source":["tf.random.set_seed(0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_ITQJU91cxR8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613563815583,"user_tz":-540,"elapsed":5377,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"90969578-692e-44da-df52-e8a95559484a"},"source":["x1_data = [1, 0, 3, 0, 5]\n","x2_data = [0, 2, 0, 4, 0]\n","y_data = [1, 2, 3, 4, 5]\n","\n","W1 = tf.Variable(tf.random.uniform((1,), -10.0, 10.0))\n","W2 = tf.Variable(tf.random.uniform((1,), -10.0, 10.0))\n","b = tf.Variable(tf.random.uniform((1,), -10.0, 10.0))\n","\n","learning_rate = tf.Variable(0.001)\n","\n","for i in range(1000+1):\n","  with tf.GradientTape() as tape:\n","    hypothesis = W1 * x1_data + W2 * x2_data + b\n","    cost = tf.reduce_mean(tf.square(hypothesis - y_data))\n","  \n","  W1_grad, W2_grad, b_grad = tape.gradient(cost, [W1, W2, b])\n","  W1.assign_sub(learning_rate * W1_grad)\n","  W2.assign_sub(learning_rate * W2_grad)\n","  b.assign_sub(learning_rate * b_grad)\n","\n","  if i % 50 == 0:\n","    print(\"{:5} | {:10.6f} | {:10.4f} | {:10.4f} | {:10.6f} |\".format(i, cost.numpy(), W1.numpy()[0], W2.numpy()[0], b.numpy()[0]))\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    0 | 335.280823 |    -4.0663 |     1.1220 |  -6.065215 |\n","   50 |  76.037262 |    -0.8001 |     1.6209 |  -4.978779 |\n","  100 |  18.959263 |     0.7151 |     1.8781 |  -4.429109 |\n","  150 |   6.310240 |     1.4125 |     2.0104 |  -4.134423 |\n","  200 |   3.445082 |     1.7284 |     2.0768 |  -3.961648 |\n","  250 |   2.743659 |     1.8667 |     2.1075 |  -3.847750 |\n","  300 |   2.525401 |     1.9225 |     2.1184 |  -3.762738 |\n","  350 |   2.417754 |     1.9402 |     2.1181 |  -3.692262 |\n","  400 |   2.337300 |     1.9403 |     2.1114 |  -3.629400 |\n","  450 |   2.264998 |     1.9325 |     2.1008 |  -3.570778 |\n","  500 |   2.196328 |     1.9213 |     2.0881 |  -3.514729 |\n","  550 |   2.130126 |     1.9085 |     2.0741 |  -3.460409 |\n","  600 |   2.066037 |     1.8953 |     2.0595 |  -3.407385 |\n","  650 |   2.003917 |     1.8819 |     2.0444 |  -3.355424 |\n","  700 |   1.943679 |     1.8686 |     2.0293 |  -3.304398 |\n","  750 |   1.885258 |     1.8555 |     2.0141 |  -3.254230 |\n","  800 |   1.828595 |     1.8425 |     1.9990 |  -3.204873 |\n","  850 |   1.773636 |     1.8297 |     1.9841 |  -3.156293 |\n","  900 |   1.720329 |     1.8171 |     1.9693 |  -3.108468 |\n","  950 |   1.668625 |     1.8048 |     1.9547 |  -3.061379 |\n"," 1000 |   1.618474 |     1.7926 |     1.9403 |  -3.015011 |\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qAEivEOZvNXq"},"source":["## Simple Example (2 variables with Matrix)"]},{"cell_type":"code","metadata":{"id":"RnI90UmIu94B","colab":{"base_uri":"https://localhost:8080/","height":395},"executionInfo":{"status":"ok","timestamp":1597455858564,"user_tz":-540,"elapsed":3911,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"ed2f2ce3-3f8f-4611-8d60-0bcb07b07366"},"source":["x_data = [\n","    [1., 0., 3., 0., 5.],\n","    [0., 2., 0., 4., 0.]\n","]\n","y_data  = [1, 2, 3, 4, 5]\n","\n","W = tf.Variable(tf.random.uniform((1, 2), -1.0, 1.0))\n","b = tf.Variable(tf.random.uniform((1,), -1.0, 1.0))\n","\n","learning_rate = tf.Variable(0.001)\n","\n","for i in range(1000+1):\n","    with tf.GradientTape() as tape:\n","        hypothesis = tf.matmul(W, x_data) + b # (1, 2) * (2, 5) = (1, 5)\n","        cost = tf.reduce_mean(tf.square(hypothesis - y_data))\n","\n","        W_grad, b_grad = tape.gradient(cost, [W, b])\n","        W.assign_sub(learning_rate * W_grad)\n","        b.assign_sub(learning_rate * b_grad)\n","    \n","    if i % 50 == 0:\n","        print(\"{:5} | {:10.6f} | {:10.4f} | {:10.4f} | {:10.6f}\".format(\n","            i, cost.numpy(), W.numpy()[0][0], W.numpy()[0][1], b.numpy()[0]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    0 |  30.003744 |    -0.8693 |    -0.6099 |   0.562821\n","   50 |   7.836334 |    -0.0238 |    -0.1530 |   0.904018\n","  100 |   2.377153 |     0.3633 |     0.1291 |   1.070535\n","  150 |   0.924887 |     0.5399 |     0.3063 |   1.149366\n","  200 |   0.495451 |     0.6204 |     0.4197 |   1.183373\n","  250 |   0.350969 |     0.6575 |     0.4935 |   1.194003\n","  300 |   0.294564 |     0.6755 |     0.5426 |   1.192192\n","  350 |   0.268330 |     0.6851 |     0.5760 |   1.183638\n","  400 |   0.253377 |     0.6913 |     0.5994 |   1.171381\n","  450 |   0.242959 |     0.6961 |     0.6164 |   1.157086\n","  500 |   0.234499 |     0.7004 |     0.6293 |   1.141689\n","  550 |   0.226969 |     0.7046 |     0.6394 |   1.125728\n","  600 |   0.219946 |     0.7087 |     0.6478 |   1.109518\n","  650 |   0.213252 |     0.7129 |     0.6551 |   1.093248\n","  700 |   0.206807 |     0.7171 |     0.6615 |   1.077033\n","  750 |   0.200576 |     0.7213 |     0.6674 |   1.060942\n","  800 |   0.194542 |     0.7254 |     0.6730 |   1.045016\n","  850 |   0.188692 |     0.7295 |     0.6783 |   1.029283\n","  900 |   0.183020 |     0.7336 |     0.6834 |   1.013755\n","  950 |   0.177519 |     0.7376 |     0.6883 |   0.998442\n"," 1000 |   0.172183 |     0.7415 |     0.6931 |   0.983348\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cgET0bb36dEO"},"source":["## GradientDescent using Tensorflow Function"]},{"cell_type":"code","metadata":{"id":"WKpnivNsv4vZ","colab":{"base_uri":"https://localhost:8080/","height":395},"executionInfo":{"status":"ok","timestamp":1597458710378,"user_tz":-540,"elapsed":2564,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"24849a9d-91c0-49ac-85f6-cd23c464246a"},"source":["# 인스턴스가 2개인 경우\n","X = tf.constant([[1., 2.],\n","                 [3., 4.]])\n","y = tf.constant([[1.5], [3.5]])\n","\n","# w를 2행 1열로 만들었다.\n","W = tf.Variable(tf.random.normal((2,1)))\n","b = tf.Variable(tf.random.normal((1,)))\n","\n","# optimizer -> \n","optimizer = tf.keras.optimizers.SGD(learning_rate=0.01)\n","# optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate=0.01)\n","\n","n_epoch = 1000+1\n","for i in range(n_epoch):\n","  with tf.GradientTape() as tape:\n","    y_pred = tf.matmul(X, W) + b\n","    cost = tf.reduce_mean(tf.square(y_pred - y))\n","  \n","  grads = tape.gradient(cost, [W, b])\n","\n","  optimizer.apply_gradients(grads_and_vars=zip(grads, [W, b]))\n","  if i % 50 == 0:\n","    print(\"{:5} | {:10.6f}\".format(i, cost.numpy()))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    0 |  13.620182\n","   50 |   0.017823\n","  100 |   0.012185\n","  150 |   0.008331\n","  200 |   0.005696\n","  250 |   0.003895\n","  300 |   0.002663\n","  350 |   0.001821\n","  400 |   0.001245\n","  450 |   0.000851\n","  500 |   0.000582\n","  550 |   0.000398\n","  600 |   0.000272\n","  650 |   0.000186\n","  700 |   0.000127\n","  750 |   0.000087\n","  800 |   0.000059\n","  850 |   0.000041\n","  900 |   0.000028\n","  950 |   0.000019\n"," 1000 |   0.000013\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZAjBWcXu9hmP"},"source":["## Predicting exam score\n","regression using three inputs (x1, x2, x3)\n","\n","x1 (quiz 1) | x2 (quiz 2) | x3 (mid 1) | Y (final)\n","---- | ---- | ----| ----\n","73 | 80 | 75 | 152\n","93 | 88 | 93 | 185\n","89 | 91 | 90 | 180\n","96 | 98 | 100 | 196\n","73 | 66 | 70 | 142"]},{"cell_type":"code","metadata":{"id":"F4QjCIRq9rON"},"source":["x1 = [ 73.,  93.,  89.,  96.,  73.]\n","x2 = [ 80.,  88.,  91.,  98.,  66.]\n","x3 = [ 75.,  93.,  90., 100.,  70.]\n","Y  = [152., 185., 180., 196., 142.]\n","\n","# weights\n","w1 = tf.Variable(10.)\n","w2 = tf.Variable(10.)\n","w3 = tf.Variable(10.)\n","b  = tf.Variable(10.)\n","\n","hypothesis = w1 * x1 +  w2 * x2 + w3 * x3 + b\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GB7rZ9DA-CuB","colab":{"base_uri":"https://localhost:8080/","height":395},"executionInfo":{"status":"ok","timestamp":1597459191202,"user_tz":-540,"elapsed":3897,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"25e8fa1b-8171-49bd-e55e-6bbc54dd28b2"},"source":["learning_rate = 0.000001\n","\n","for i in range(1000+1):\n","  with tf.GradientTape() as tape:\n","    hypothesis = w1 * x1 + w2 * x2 + w3 * x3 + b\n","    cost = tf.reduce_mean(tf.square(hypothesis - Y))\n","\n","  w1_grad, w2_grad, w3_grad, b_grad = tape.gradient(cost, [w1, w2, w3, b])\n","\n","# 각각을 assign\n","  w1.assign_sub(learning_rate * w1_grad)\n","  w2.assign_sub(learning_rate * w2_grad)\n","  w3.assign_sub(learning_rate * w3_grad)\n","  b.assign_sub(learning_rate * b_grad)\n","\n","  if i % 50 == 0:\n","    print(\"{:5} | {:12.4f}\".format(i, cost.numpy()))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    0 | 5793889.5000\n","   50 |   64291.1562\n","  100 |     715.2902\n","  150 |       9.8461\n","  200 |       2.0153\n","  250 |       1.9252\n","  300 |       1.9210\n","  350 |       1.9177\n","  400 |       1.9145\n","  450 |       1.9114\n","  500 |       1.9081\n","  550 |       1.9050\n","  600 |       1.9018\n","  650 |       1.8986\n","  700 |       1.8955\n","  750 |       1.8923\n","  800 |       1.8892\n","  850 |       1.8860\n","  900 |       1.8829\n","  950 |       1.8798\n"," 1000 |       1.8767\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mvUx7fAw_SX8"},"source":["### Multi-variable linear regression (1)\n","*  random  초기화: tf.random_normal()\n"]},{"cell_type":"code","metadata":{"id":"S53O1J9W_ijJ"},"source":["tf.random.set_seed(0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nAb1qCqf_USm","colab":{"base_uri":"https://localhost:8080/","height":395},"executionInfo":{"status":"ok","timestamp":1597459292735,"user_tz":-540,"elapsed":4257,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"000834c8-863d-4e33-a2cf-faafb3264ce0"},"source":["# data and label\n","x1 = [ 73.,  93.,  89.,  96.,  73.]\n","x2 = [ 80.,  88.,  91.,  98.,  66.]\n","x3 = [ 75.,  93.,  90., 100.,  70.]\n","Y  = [152., 185., 180., 196., 142.]\n","\n","# random weights\n","w1 = tf.Variable(tf.random.normal((1,)))\n","w2 = tf.Variable(tf.random.normal((1,)))\n","w3 = tf.Variable(tf.random.normal((1,)))\n","b  = tf.Variable(tf.random.normal((1,)))\n","\n","learning_rate = 0.000001\n","\n","for i in range(1000+1):\n","    # tf.GradientTape() to record the gradient of the cost function\n","    with tf.GradientTape() as tape:\n","        hypothesis = w1 * x1 +  w2 * x2 + w3 * x3 + b\n","        cost = tf.reduce_mean(tf.square(hypothesis - Y))\n","    # calculates the gradients of the cost\n","    w1_grad, w2_grad, w3_grad, b_grad = tape.gradient(cost, [w1, w2, w3, b])\n","    \n","    # update w1,w2,w3 and b\n","    w1.assign_sub(learning_rate * w1_grad)\n","    w2.assign_sub(learning_rate * w2_grad)\n","    w3.assign_sub(learning_rate * w3_grad)\n","    b.assign_sub(learning_rate * b_grad)\n","\n","    if i % 50 == 0:\n","      print(\"{:5} | {:12.4f}\".format(i, cost.numpy()))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    0 |   11325.9121\n","   50 |     135.3618\n","  100 |      11.1817\n","  150 |       9.7940\n","  200 |       9.7687\n","  250 |       9.7587\n","  300 |       9.7489\n","  350 |       9.7389\n","  400 |       9.7292\n","  450 |       9.7194\n","  500 |       9.7096\n","  550 |       9.6999\n","  600 |       9.6903\n","  650 |       9.6806\n","  700 |       9.6709\n","  750 |       9.6612\n","  800 |       9.6517\n","  850 |       9.6421\n","  900 |       9.6325\n","  950 |       9.6229\n"," 1000 |       9.6134\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7JLUmc9D_XsI"},"source":["#### 위처럼 하지 않고 행렬을 이용해서 하는 방법\n"]},{"cell_type":"code","metadata":{"id":"yxKahHcu5rL7"},"source":["data = np.array([\n","    # X1,   X2,    X3,   y\n","    [ 73.,  80.,  75., 152. ],\n","    [ 93.,  88.,  93., 185. ],\n","    [ 89.,  91.,  90., 180. ],\n","    [ 96.,  98., 100., 196. ],\n","    [ 73.,  66.,  70., 142. ]\n","], dtype=np.float32)\n","\n","# slice data - 슬라이싱을 통해서 데이터를 정한다.\n","\n","# 열 하나를 빼기\n","X = data[:, :-1]\n","# 마지막 열만 가져오기\n","y = data[:, [-1]]\n","\n","W = tf.Variable(tf.random.normal((3, 1)))\n","b = tf.Variable(tf.random.normal((1,)))\n","\n","# 데이터가 많기 때문에 rate를 더 작게 설정한다.\n","learning_rate = 0.000001\n","\n","# hypothesis, prediction function\n","def predict(X):\n","    return tf.matmul(X, W) + b\n","\n","# 2000번의 연산을 시킬 것이다.\n","n_epochs = 2000\n","\n","for i in range(n_epoch+1):\n","  with tf.GradientTape() as tape:\n","    cost = tf.reduce_mean((tf.square(predict(X) - y)))\n","  \n","  # 행렬에 대한 값이 행렬로 돌아올 것이다.\n","  W_grad, b_grad = tape.gradient(cost, [W, b])\n","\n","  # 여러개의 행렬연산을 한번에 해준다. W(3개 한번에)\n","  W.assign_sub(learning_rate * W_grad)\n","  b.assign_sub(learning_rate * b_grad)\n","\n","  if i % 100 == 0:\n","    print(\"{:5} | {:10.6f}\".format(i, cost.numpy()))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kNiL6IM1Albr","colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"status":"ok","timestamp":1597459608004,"user_tz":-540,"elapsed":742,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"9e52ec4b-fbef-42e5-9dd1-6da2dd43523f"},"source":["W"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'Variable:0' shape=(3, 1) dtype=float32, numpy=\n","array([[ 1.861813  ],\n","       [ 0.53110313],\n","       [-0.3634701 ]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"LwDE8qA6Ay6z","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597459614756,"user_tz":-540,"elapsed":861,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"ead9e25f-fc2c-4c86-aa82-3de2d16df211"},"source":["b"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.5749455], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"y2z_GtWIA0a5","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1597459643058,"user_tz":-540,"elapsed":1037,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"bf7572d4-e8a5-4cf2-d8a8-b60759d5e5d6"},"source":["tf.matmul(X, W) + b"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(5, 1), dtype=float32, numpy=\n","array([[150.56538],\n","       [185.50801],\n","       [180.74448],\n","       [193.86018],\n","       [144.9473 ]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"B-mKgkMBA7Sx","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597459650638,"user_tz":-540,"elapsed":717,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"e419ad79-5d05-4561-b6eb-4f3ba22b0ccd"},"source":["Y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[152.0, 185.0, 180.0, 196.0, 142.0]"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"p5zEcbIdA9SG","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1597459659354,"user_tz":-540,"elapsed":740,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"105260c0-b9bb-4a1f-c012-8ff942d2f239"},"source":["predict(X)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(5, 1), dtype=float32, numpy=\n","array([[150.56538],\n","       [185.50801],\n","       [180.74448],\n","       [193.86018],\n","       [144.9473 ]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"oWg6g_FZA_dK","colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1597459697102,"user_tz":-540,"elapsed":808,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"c8880127-b789-44ba-a1c0-c274b1edf918"},"source":["# 새로운 데이터에 대한 예측\n","\n","predict([[ 89.,  95.,  92.],[ 84.,  92.,  85.]]).numpy()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[182.14195],\n","       [173.78387]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"vcVUvnbJ1a8V"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WXR3Gv4-Buee"},"source":["# Lab 05 Logistic Classification(Regression) - Eager Execution\n","* Logistic Classfication은 True or False와 같은 Binary나 복수개의 다항 분류에 쓰입니다 (Bernoulli Distribution)\n","\n","### 기본 Library 선언 및 Tensorflow 버전 확인"]},{"cell_type":"code","metadata":{"id":"hYoWYg8gBxLA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613919915336,"user_tz":-540,"elapsed":536,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"76abc2aa-8076-43b4-f86b-6bbdc185218f"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import tensorflow as tf\n","\n","tf.random.set_seed(777)  # for reproducibility\n","print(tf.__version__)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["2.4.1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zanmA22DB5Zk"},"source":["### 강의에 설명할 Data입니다\n","* x_data가 2차원 배열이기에 2차원 공간에 표현하여 x1과 x2를 기준으로 y_data 0과 1로 구분하는 예제입니다\n","* Logistic Classification 통해 보라색과 노란색 y_data(Label)을 구분해 보겠습니다.\n","* Test 데이터는 붉은색의 위치와 같이 추론시 1의 값을 가지게 됩니다."]},{"cell_type":"code","metadata":{"id":"OG3q_VZ4B3LY","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1613919929702,"user_tz":-540,"elapsed":530,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"8a3a66fe-1135-4d48-c138-d40f64a76d80"},"source":["x_train = [[1., 2.],\n","          [2., 3.],\n","          [3., 1.],\n","          [4., 3.],\n","          [5., 3.],\n","          [6., 2.]]\n","y_train = [[0.],\n","          [0.],\n","          [0.],\n","          [1.],\n","          [1.],\n","          [1.]]\n","\n","x_test = [[5.,2.]]\n","y_test = [[1.]]\n","\n","x1 = [x[0] for x in x_train]\n","x2 = [x[1] for x in x_train]\n","\n","colors = [int(y[0] % 3) for y in y_train]\n","plt.scatter(x1,x2, c=colors , marker='^')\n","plt.scatter(x_test[0][0],x_test[0][1], c=\"red\")\n","\n","plt.xlabel(\"x1\")\n","plt.ylabel(\"x2\")\n","plt.show()"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Nq7khyF7CbDO"},"source":["##  Tensorflow 2\n","### 위 Data를 기준으로 가설의 검증을 통해 Logistic Classification 모델을 만들도록 하겠습니다\n","* Tensorflow data API를 통해 학습시킬 값들을 담는다 (Batch Size는 한번에 학습시킬 Size로 정한다)\n","* features, labels는 실제 학습에 쓰일 Data (연산을 위해 Type를 맞춰준다)"]},{"cell_type":"code","metadata":{"id":"tOcf6NExCGpA","executionInfo":{"status":"ok","timestamp":1613920256144,"user_tz":-540,"elapsed":644,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}}},"source":["dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train))"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"oNrgfGZbEk5x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613920256390,"user_tz":-540,"elapsed":555,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"4851aade-8b94-4716-ee22-00d3990dd3ef"},"source":["dataset"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<BatchDataset shapes: ((None, 2), (None, 1)), types: (tf.float32, tf.float32)>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"RriwMhtHEqDQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613920256932,"user_tz":-540,"elapsed":411,"user":{"displayName":"­박유선","photoUrl":"","userId":"16454803616849098949"}},"outputId":"b8d4f998-77cd-4aab-e5b8-48fe7e6bb346"},"source":["for step in range(1):\n","    for features, labels  in iter(dataset):\n","      print(features, labels)\n"],"execution_count":12,"outputs":[{"output_type":"stream","text":["tf.Tensor(\n","[[1. 2.]\n"," [2. 3.]\n"," [3. 1.]\n"," [4. 3.]\n"," [5. 3.]\n"," [6. 2.]], shape=(6, 2), dtype=float32) tf.Tensor(\n","[[0.]\n"," [0.]\n"," [0.]\n"," [1.]\n"," [1.]\n"," [1.]], shape=(6, 1), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lEedlDL3Fqqw"},"source":["### 위 Data를 기준으로 가설의 검증을 통해 Logistic Classification 모델을 만들도록 하겠습니다\n","* W와 b은 학습을 통해 생성되는 모델에 쓰이는 Wegith와 Bias (초기값을 variable : 0이나 Random값으로 가능 tf.random_normal([2, 1]) )"]},{"cell_type":"code","metadata":{"id":"twW3O0tcFt7i"},"source":["W = tf.Variable(tf.zeros([2,1]), name='weight')\n","b = tf.Variable(tf.zeros([1]), name='bias')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KIhNo4O8F415"},"source":["### Sigmoid 함수를 가설로 선언합니다\n","* Sigmoid는 아래 그래프와 같이 0과 1의 값만을 리턴합니다 tf.sigmoid(tf.matmul(X, W) + b)와 같습니다\n","\n","$$\n","\\begin{align}\n","sigmoid(x) & = \\frac{1}{1+e^{-x}}  \\\\\\\\\\\n","\\end{align}\n","$$\n","\n","![sigmoid](https://upload.wikimedia.org/wikipedia/commons/8/88/Logistic-curve.svg)"]},{"cell_type":"code","metadata":{"id":"NwZ9Qk44GnLI"},"source":["def logistic_regression(features):\n","    hypothesis  = tf.divide(1., 1. + tf.exp(tf.matmul(features, W) + b))\n","    return hypothesis"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o-zGsZQ8C3du"},"source":["### 가설을 검증할 Cost 함수를 정의합니다\n","$$\n","\\begin{align}\n","cost(h(x),y) & = −log(h(x))  &  if  &  y=1 \\\\\\\\\\\n","cost(h(x),y) & = -log(1−h(x))  &  if  &  y=0\n","\\end{align}\n","$$"]},{"cell_type":"markdown","metadata":{"id":"XYhB4XBYC8t-"},"source":["* 위 두수식을 합치면 아래과 같습니다\n","$$\n","\\begin{align}\n","cost(h(x),y) & = −y log(h(x))−(1−y)log(1−h(x))\n","\\end{align}\n","$$"]},{"cell_type":"code","metadata":{"id":"UATLx2iUCy7M"},"source":["def loss_fn(hypothesis, features, labels):\n","    cost = -tf.reduce_mean(labels * tf.math.log(logistic_regression(features)) + (1 - labels) * tf.math.log(1 - hypothesis))\n","    return cost\n","\n","# optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate=0.01)\n","optimizer = tf.keras.optimizers.SGD(learning_rate=0.01)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9Bah1LzjDRVQ"},"source":["### 추론한 값은 0.5를 기준(Sigmoid 그래프 참조)로 0과 1의 값을 리턴합니다.\n","* Sigmoid 함수를 통해 예측값이 0.5보다 크면 1을 반환하고 0.5보다 작으면 0으로 반환합니다.\n","* 가설을 통해 실재 값과 비교한 정확도를 측정합니다.\n","\n","![sigmoid](https://upload.wikimedia.org/wikipedia/commons/8/88/Logistic-curve.svg)"]},{"cell_type":"code","metadata":{"id":"I4nMd4GZC2me"},"source":["def accuracy_fn(hypothesis, labels):\n","    predicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)\n","    accuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, labels), dtype=tf.float32))\n","    return accuracy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"K6f6Y1iYDwuR"},"source":["### GradientTape를 통해 경사값을 계산합니다."]},{"cell_type":"code","metadata":{"id":"5zur9dW_Du1U"},"source":["def grad(features, labels):\n","    with tf.GradientTape() as tape:\n","        loss_value = loss_fn(logistic_regression(features),features,labels)\n","    return tape.gradient(loss_value, [W,b])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mQHQAm_vD4AI"},"source":["### 학습을 실행합니다.\n","* 위의 Data를 Cost함수를 통해 학습시킨 후 모델을 생성합니다. \n","* 새로운 Data를 통한 검증 수행 [5,2]의 Data로 테스트 수행 (그래프상 1이 나와야 정상입니다)"]},{"cell_type":"code","metadata":{"id":"E9f-RSeUD6PJ","colab":{"base_uri":"https://localhost:8080/","height":233},"executionInfo":{"status":"ok","timestamp":1597461153135,"user_tz":-540,"elapsed":11983,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"40780d24-8149-44c4-cd58-9ce90dbde288"},"source":["EPOCHS = 1001\n","\n","for step in range(EPOCHS):\n","    for features, labels  in iter(dataset):\n","        grads = grad(features, labels)\n","        optimizer.apply_gradients(grads_and_vars=zip(grads,[W,b]))\n","        if step % 100 == 0:\n","            print(\"Iter: {}, Loss: {:.4f}\".format(step, loss_fn(logistic_regression(features),features,labels)))\n","test_acc = accuracy_fn(logistic_regression(x_test),y_test)\n","print(\"Testset Accuracy: {:.4f}\".format(test_acc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Iter: 0, Loss: 0.6874\n","Iter: 100, Loss: 0.5776\n","Iter: 200, Loss: 0.5349\n","Iter: 300, Loss: 0.5054\n","Iter: 400, Loss: 0.4838\n","Iter: 500, Loss: 0.4671\n","Iter: 600, Loss: 0.4535\n","Iter: 700, Loss: 0.4420\n","Iter: 800, Loss: 0.4319\n","Iter: 900, Loss: 0.4228\n","Iter: 1000, Loss: 0.4144\n","Testset Accuracy: 1.0000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NG09KR6lEB1z"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CrsQgOasHJlu"},"source":["# Lab 05 Logistic Classification (diabetes) - Eager Execution\n","* Logistic Classfication을 diabetes data를 활용하여 모델을 만들어 보도록 하겠습니다\n","### 기본 Library 선언 및 Tensorflow 버전 확인"]},{"cell_type":"code","metadata":{"id":"obQLtfq4HAEk","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597463902528,"user_tz":-540,"elapsed":897,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"1512b1ce-7095-4231-e21b-ffc7f7776398"},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","tf.random.set_seed(333)\n","print(tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.3.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VoDldTrcHfUb"},"source":["## 강의에 설명할 Data입니다."]},{"cell_type":"markdown","metadata":{"id":"UH5-XD0PJr7L"},"source":["## 구글 드라이브 마운트해서 파일 읽기\n","\n","### 구글 드라이브 접근 권한 얻기\n","\n","파일 경로 지정에 주의하세요. 처음 여기서 시간 많이 씁니다.\n","* 대소문자 주의\n","* 여백 문자 주의"]},{"cell_type":"code","metadata":{"id":"-sgYxO0uH3ZX","colab":{"base_uri":"https://localhost:8080/","height":55},"executionInfo":{"status":"ok","timestamp":1597463902528,"user_tz":-540,"elapsed":891,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"aed89252-cf8e-45d5-b198-f8fbda19a63c"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"URnXKfvCHYIw","colab":{"base_uri":"https://localhost:8080/","height":161},"executionInfo":{"status":"ok","timestamp":1597463902529,"user_tz":-540,"elapsed":887,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"f075b44f-60a9-4915-8a2f-70b731b1aafb"},"source":["xy = np.loadtxt('/content/gdrive/My Drive/Colab Notebooks/TensorFlow 2 (ME)/data-03-diabetes.csv', delimiter=',', dtype=np.float32)\n","x_train = xy[:, 0:-1]\n","y_train = xy[:, [-1]]\n","\n","print(x_train.shape, y_train.shape)\n","print(xy)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(759, 8) (759, 1)\n","[[-0.294118   0.487437   0.180328  ... -0.53117   -0.0333333  0.       ]\n"," [-0.882353  -0.145729   0.0819672 ... -0.766866  -0.666667   1.       ]\n"," [-0.0588235  0.839196   0.0491803 ... -0.492741  -0.633333   0.       ]\n"," ...\n"," [-0.411765   0.21608    0.180328  ... -0.857387  -0.7        1.       ]\n"," [-0.882353   0.266332  -0.0163934 ... -0.768574  -0.133333   0.       ]\n"," [-0.882353  -0.0653266  0.147541  ... -0.797609  -0.933333   1.       ]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zwYJLMbrKVS0"},"source":["##  Tensorflow 2\n","\n","### 위 Data를 기준으로 가설의 검증을 통해 Logistic Classification 모델을 만들도록 하겠습니다.\n","* Tensorflow data API를 통해 학습시킬 값들을 구성합니다. (Batch Size는 한번에 학습시킬 Size)"]},{"cell_type":"code","metadata":{"id":"jQMbnTfsKU-Q"},"source":["dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lcLznEnyKl6r"},"source":["### 위 Data를 기준으로 가설과 검증을 통해 Logistic Classification 모델을 만들도록 하겠습니다.\n","\n","* W 변수와 b 변수는 학습을 통해 계산될 모델에 쓰이는 Wegith와 Bias\n","* 0 또는 Random 값으로 초기화 합니다. tf.random_normal([2, 1])"]},{"cell_type":"code","metadata":{"id":"R3tVzhlRJLtl"},"source":["W = tf.Variable(tf.random.normal((8, 1)), name='weight')\n","b = tf.Variable(tf.random.normal((1,)), name='bias')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O5MREvBeLp5j"},"source":["### Sigmoid 함수를 가설로 선언합니다\n","* Sigmoid는 아래 그래프와 같이 0과 1의 값만을 리턴합니다 tf.sigmoid(tf.matmul(X, W) + b)와 같습니다\n","\n","$$\n","\\begin{align}\n","sigmoid(x) & = \\frac{1}{1+e^{-x}}  \\\\\\\\\\\n","\\end{align}\n","$$\n","\n","![sigmoid](https://upload.wikimedia.org/wikipedia/commons/8/88/Logistic-curve.svg)"]},{"cell_type":"code","metadata":{"id":"tOPApif5Ltbq"},"source":["def logistic_regression(features):\n","    hypothesis  = tf.divide(1., 1. + tf.exp(tf.matmul(features, W) + b))\n","    return hypothesis"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BttOx0JpLvnE"},"source":["### 가설을 검증할 Cost 함수를 정의합니다\n","$$\n","\\begin{align}\n","cost(h(x),y) & = −log(h(x))  &  if  &  y=1 \\\\\\\\\\\n","cost(h(x),y) & = -log(1−h(x))  &  if  &  y=0\n","\\end{align}\n","$$"]},{"cell_type":"markdown","metadata":{"id":"PcNe6YRcL8cY"},"source":["* 위 두수식을 합치면 아래과 같습니다\n","$$\n","\\begin{align}\n","cost(h(x),y) & = −y log(h(x))−(1−y)log(1−h(x))\n","\\end{align}\n","$$"]},{"cell_type":"code","metadata":{"id":"u7FffydeL2dB"},"source":["def loss_fn(hypothesis, features, labels):\n","    cost = -tf.reduce_mean(labels * tf.math.log(logistic_regression(features)) + (1 - labels) * tf.math.log(1 - hypothesis))\n","    return cost\n","\n","optimizer = tf.keras.optimizers.SGD(learning_rate=0.01)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-WX05rveMA4j"},"source":["### 추론한 값은 0.5를 기준(Sigmoid 그래프 참조)로 0과 1의 값을 리턴합니다.\n","* Sigmoid 함수를 통해 예측값이 0.5보다 크면 1을 반환하고 0.5보다 작으면 0으로 반환합니다."]},{"cell_type":"code","metadata":{"id":"BbDiyYIiL-Xf"},"source":["def accuracy_fn(hypothesis, labels):\n","    predicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)\n","    accuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, labels), dtype=tf.float32))\n","    return accuracy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hwGRMq7UMD9l"},"source":["### GradientTape를 통해 경사값을 계산합니다."]},{"cell_type":"code","metadata":{"id":"I61fKCHmMGJ9"},"source":["def grad(hypothesis, features, labels):\n","    with tf.GradientTape() as tape:\n","        loss_value = loss_fn(logistic_regression(features),features,labels)\n","    return tape.gradient(loss_value, [W,b])\n","  "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C1IFvyDvMNU1"},"source":["### 학습을 실행합니다. "]},{"cell_type":"code","metadata":{"id":"fPejQE6gMH9Q","colab":{"base_uri":"https://localhost:8080/","height":161},"outputId":"b42d0adb-6b16-4609-c2b1-50ca06f6dac0"},"source":["EPOCHS = 10001\n","\n","for step in range(EPOCHS):\n","    for features, labels  in iter(dataset):\n","        grads = grad(logistic_regression(features), features, labels)\n","        optimizer.apply_gradients(grads_and_vars=zip(grads,[W,b]))\n","        if step % 1000 == 0:\n","            print(\"Iter: {}, Loss: {:.4f}\".format(step, loss_fn(logistic_regression(features),features,labels)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Iter: 0, Loss: 0.9626\n","Iter: 1000, Loss: 0.7223\n","Iter: 2000, Loss: 0.6363\n","Iter: 3000, Loss: 0.5829\n","Iter: 4000, Loss: 0.5497\n","Iter: 5000, Loss: 0.5284\n","Iter: 6000, Loss: 0.5144\n","Iter: 7000, Loss: 0.5047\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RFDYwpVJMRxX"},"source":["train_acc = accuracy_fn(logistic_regression(x_train), y_train)\n","print(\"Training Accuracy: {:.4f}\".format(train_acc))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sTTHi-VhMflG"},"source":[""],"execution_count":null,"outputs":[]}]}